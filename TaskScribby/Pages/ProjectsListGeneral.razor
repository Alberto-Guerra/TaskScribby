@using TaskScribby.Areas.Identity.Data;
@using Microsoft.AspNetCore.Identity
@using TaskScribby.Areas.Identity.Services;


@inject ProjectService ProjectService

@attribute [AllowAnonymous]

<PageTitle>Index</PageTitle>



@if (User != null)
{

    if (IsSmall)
    {
        handler = new MobileProjectHandler();
    }
    else
    {
        handler = new DesktopProjectHandler();
    }

    <div class="general-container main-background">
        @if (listProjectsVisible && !editMode)
        {                          
                    
            <div class="project-list-container">
                @foreach (var project in User.Projects)
                {
                    <div class="project-container secondary-background shadow-always shadow-hover" @onclick="() => handler.handleClick(project,this)">
                        <h4>@project.ProjectName - @project.ProjectPercentage%</h4>

                        @{
                            var description = @project.ProjectDescription;
                        }
                        @if (!string.IsNullOrEmpty(description) && description.Length > 100)
                        {
                            <p>@description.Substring(0, 100)...</p>
                        }
                        else if (!string.IsNullOrEmpty(description))
                        {
                            <p>@description</p>
                        }
                        </div>

                   
                }
            </div>
        }

        @if (selectedProjectVisible && !editMode)
        {
           
            if (selectedProject != null)
            {
                <div class="concrete-project-container secondary-background shadow-always">
                 
                <div class="project-content">
                <div class="project-title">
                            <span @onclick="() => handler.handleBack(this)" style="font-size: 15px;" class="oi oi-x hoverable" aria-hidden="true"></span>
                <h3>
                    
                        @selectedProject.ProjectName - @selectedProject.ProjectPercentage% 
                                <span @onclick="() => DeleteProject(selectedProject)" class="oi oi-trash hoverable" aria-hidden="true"></span>
                </h3>
                    </div>
                <div class="project-description">

                    <p>@selectedProject.ProjectDescription</p>
                 </div>
                 </div>
                    <div class="project-editmode-button">
                        <button class="highlight" @onclick="() => ToggleEditMode()"> <span class="oi oi-brush" aria-hidden="true"></span>  Edit Mode </button>
                 </div>
            </div>
            }

        }

        @if (editMode && selectedProject != null)
        {
            <div class="form-div ">
                <form class="form-style shadow-always">
                    <div class="form-group-div">
                        <div class="form-group">
                            <span class="back-button" @onclick="() =>ToggleEditMode()"> &lt- </span> <br>
                            <label for="project-name"> Name of the Project:</label><br>
                            <input type="text" class="form-control font-normal" id="project-name" @bind-value="@selectedProject.ProjectName"><br>
                        </div>
                        <div class="form-group">
                            <label for="project-desc">Description:</label><br>
                            <textarea class="form-control desc font-normal" id="project-desc" @oninput="@HandleDescriptionOnChange"> @selectedProject.ProjectDescription </textarea><br>
                        </div>
                        <div class="form-group">
                            <label for="project-perc">Percentage:</label>
                            <input type="number" class="form-control font-normal" id="project-perc" name="project-perc" min="0" max="100" required @bind-value="@selectedProject.ProjectPercentage"><br>
                        </div>
                    </div>
                    <div class="form-group-button">
                        <input type="submit" class="highlight btn-create" value="Update" @onclick="() => UpdateProject()">

                    </div>
                </form>
            </div>
        }

    </div>

}

<MediaQuery Media="@Breakpoints.SmallDown" @bind-Matches="IsSmall" />

@code {

    bool authenticated = false;

    [Parameter]
    public ApplicationUser User { get; set; }

    [Parameter]
    public bool darkMode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User.Projects = ProjectService.GetProjectsByUserID(User.Id);

    }

    bool IsSmall;

    public void UpdateProject(Project project)
    {

    }

    public void DeleteProject(Project project)
    {
        if (User != null)
        {
            User.Projects.Remove(project);
            ProjectService.DeleteProject(project);
            handler.handleBack(this);
        }
    }

    bool listProjectsVisible = true;
    bool selectedProjectVisible = false;
    Project? selectedProject;
    Handler handler;

    public interface Handler
    {
        public void handleClick(Project p, ProjectsListGeneral plg);
        public void handleBack(ProjectsListGeneral plg);
    }

    public class MobileProjectHandler : Handler
    {
        public void handleClick(Project p, ProjectsListGeneral plg)
        {
            plg.selectedProject = p;
            plg.selectedProjectVisible = true;
            plg.listProjectsVisible = false;
        }

        public void handleBack(ProjectsListGeneral plg)
        {
            plg.selectedProject = null;
            plg.selectedProjectVisible = false;
            plg.listProjectsVisible = true;
        }

    }

    public class DesktopProjectHandler : Handler
    {
        public void handleClick(Project p, ProjectsListGeneral plg)
        {
            plg.selectedProject = p;
            plg.selectedProjectVisible = true;
        }

        public void handleBack(ProjectsListGeneral plg)
        {
            plg.selectedProject = null;
            plg.selectedProjectVisible = false;
        }
    }

    bool editMode = false;

    public void ToggleEditMode()
    {
        editMode = !editMode;
    }

    private void HandleDescriptionOnChange(ChangeEventArgs e)
    {
        if (e.Value == null)
        {
            return;
        }
        selectedProject.ProjectDescription = e.Value.ToString();


    }

    public void UpdateProject()
    {
        if( User != null && selectedProject != null)
        {
            ProjectService.UpdateProject(selectedProject, User);
        }
    }


}
