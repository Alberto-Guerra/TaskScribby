@page "/"


@using TaskScribby.Areas.Identity.Data;
@using Microsoft.AspNetCore.Identity
@using TaskScribby.Areas.Identity.Services;

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject ProjectService ProjectService
@inject IJSRuntime jsRuntime



<PageTitle>Index</PageTitle>



@if (authenticated)
{
    @if (user != null)
    {
        <div class="page">
        <div class="wrapper">
            <header>
                <p>@user.Email</p>
                <form method="post" action="Identity/Account/LogOut">
                        <button type="submit" class="button-logout">Log out</button>
                </form>

                   
                    
            </header>
               

            <div class="content">
                <div class="links">
                    <a href="/" style="color: #E83671">Projects</a>
                    <a href="#">Tasks</a>
                    <a href="#">Notes</a>
                        @if (!IsSmall && isProjectListVisible)
                    {
                        <div class="button-div">

                                <button class="new-proyect-pc" @onclick="() =>showNewProject()">New Project</button>
                                

                        </div>
                    }
                </div>

                @if (isProjectListVisible)
                {
                    <div class="projects-list">
                        <ProjectsListGeneral User=@user>
                        </ProjectsListGeneral>
                    </div>

                        @if (IsSmall)
                        {
                            <div class="button-div">

                                <button class="new-proyect-mobile" @onclick="() =>showNewProject()">New Project</button>

                            </div>
                        }
                }

                @if (isNewProjectVisible)
                {
                        
                        <form class="form-style">
                            <div class="form-group">
                                <label for="project-name">Name of the Project:</label><br>
                                <input type="text" class="form-control" id="project-name" @bind-value="@ProjectName"><br>
                            </div>
                            <div class="form-group">
                                <label for="project-desc">Description:</label><br>
                                <textarea class="form-control" id="project-desc" @oninput="@HandleDescriptionOnChange"> @ProjectDescription </textarea><br>
                            </div>
                            <div class="form-group">
                                <label for="project-perc">Percentage:</label>
                                <input type="number" class="form-control" id="project-perc" name="project-perc" min="0" max="100" required @bind-value="@ProjectPercentage"><br>
                            </div>
                            <div class="form-group">
                                <input type="submit" class="btn new-proyect-pc" value="Create" @onclick="() =>createProject()">
                                <span class="oi oi-x" @onclick="() =>showProjectList()">  </span>
                            </div>
                        </form>

                }

              

               
            </div>

        </div>
        </div>
    }
    
}
else
{
    //open login page
    NavigationManager.NavigateTo("/Identity/Account/Login");

}



<MediaQuery Media="@Breakpoints.SmallDown" @bind-Matches="IsSmall" />

@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    bool authenticated = false;


    ApplicationUser user;

    bool IsSmall = false;

    bool isProjectListVisible = true;
    bool isNewProjectVisible = false;


    protected override async Task OnInitializedAsync()
    {
        var currentUser = (await authenticationStateTask).User;

        if (currentUser.Identity.IsAuthenticated)
        {
            authenticated = true;
            user = await UserManager.GetUserAsync(currentUser);


        }

    }

    void showNewProject()
    {
        isProjectListVisible = false;
        isNewProjectVisible = true;
    }

    void showProjectList()
    {
        isProjectListVisible = true;
        isNewProjectVisible = false;
    }

    string ProjectName { get; set; } = "";
    string ProjectDescription { get; set; } = "";
    double ProjectPercentage { get; set; }

    private void HandleDescriptionOnChange(ChangeEventArgs e)
    {
        if (e.Value == null)
        {
            return;
        }
        ProjectDescription = e.Value.ToString();


    }

    void createProject()
    {
        if(ProjectName == "")
        {
            jsRuntime.InvokeVoidAsync("alert", "You Cannot Create a Project Without a Name!!");
            return;
        }

        if (ProjectDescription == "")
        {
            jsRuntime.InvokeVoidAsync("alert", "You Cannot Create a Project Without a Description!!");
            return;
        }

        if (ProjectPercentage < 0 || ProjectPercentage > 100)
        {
            jsRuntime.InvokeVoidAsync("alert", "Percentage should be between 0 and 100!!");
            return;
        }

        var p = new Project(ProjectName, ProjectDescription, ProjectPercentage);
        ProjectService.AddProject(p, user);

        clearForm();

        showProjectList();
    }

    void clearForm()
    {
        ProjectName = "";
        ProjectDescription = "";
        ProjectPercentage = 0;
    }

    void logOut()
    {

        //AuthenticationManager.SignOut();
    }


}

